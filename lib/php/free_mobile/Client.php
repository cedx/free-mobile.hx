<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace free_mobile;

use \php\_Boot\HxAnon;
use \tink\http\Fetch;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \haxe\Exception;
use \tink\core\Noise;
use \tink\querystring\Builder0;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxString;
use \tink\_Url\Url_Impl_;
use \tink\core\FutureObject;
use \haxe\io\Path;

/**
 * Sends messages by SMS to a [Free Mobile](https://mobile.free.fr) account.
 */
class Client {
	/**
	 * @var string
	 * The URL of the API end point.
	 */
	public $endPoint;
	/**
	 * @var string
	 * The identification key associated to the account.
	 */
	public $password;
	/**
	 * @var string
	 * The user name associated to the account.
	 */
	public $username;

	/**
	 * Creates a new client.
	 * 
	 * @param string $username
	 * @param string $password
	 * @param string $endPoint
	 * 
	 * @return void
	 */
	public function __construct ($username, $password, $endPoint = "https://smsapi.free-mobile.fr") {
		if ($endPoint === null) {
			$endPoint = "https://smsapi.free-mobile.fr";
		}
		$this->endPoint = Path::removeTrailingSlashes($endPoint);
		$this->password = $password;
		$this->username = $username;
	}

	/**
	 * Sends a SMS message to the underlying account.
	 * 
	 * @param string $text
	 * 
	 * @return FutureObject
	 */
	public function sendMessage ($text) {
		$url = "" . ($this->endPoint??'null') . "/sendmsg?";
		$url1 = new Builder0();
		$url2 = HxString::substring(\trim($text), 0, 160);
		$url3 = ($url??'null') . ($url1->stringify(new HxAnon([
			"msg" => $url2,
			"pass" => $this->password,
			"user" => $this->username,
		]))??'null');
		try {
			return Fetch::fetch(Url_Impl_::fromString($url3), null)->map(function ($outcome) {
				$__hx__switch = ($outcome->index);
				if ($__hx__switch === 0) {
					return Outcome::Success(Noise::Noise());
				} else if ($__hx__switch === 1) {
					$_g = $outcome->params[0];
					if (($_g->code === 500) && (new \EReg("content-length header is required", "i"))->match($_g->message)) {
						return Outcome::Success(Noise::Noise());
					} else {
						return Outcome::Failure($_g);
					}
				}
			})->gather();
		} catch(\Throwable $_g) {
			$e = Exception::caught($_g)->get_message();
			return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(null, $e, new HxAnon([
				"fileName" => "src/free_mobile/Client.hx",
				"lineNumber" => 41,
				"className" => "free_mobile.Client",
				"methodName" => "sendMessage",
			])))));
		}
	}
}

Boot::registerClass(Client::class, 'free_mobile.Client');
